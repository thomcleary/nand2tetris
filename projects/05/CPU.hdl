// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=isAinstruction);
    Mux16(a=aluOut, b=instruction, sel=isAinstruction, out=instructionOrALU);
    And(a=instruction[15], b=instruction[5], out=isCInstructionAndDestA);
    Or(a=isAinstruction, b=isCInstructionAndDestA, out=loadAReg);
    ARegister(in=instructionOrALU, load=loadAReg, out=aRegOut, out[0..14]=addressM);

    And(a=instruction[15], b=instruction[4], out=isCInstructionAndDestD);
    DRegister(in=aluOut, load=isCInstructionAndDestD, out=dRegOut);

    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=aRegOrInM);

    ALU(x=dRegOut, y=aRegOrInM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=zr, ng=ng);

    And(a=instruction[15], b=instruction[3], out=writeM);

    Not(in=zr, out=notZr);
    Not(in=ng, out=notNg);

    And(a=notZr, b=notNg, out=gtZero);
    And(a=instruction[0], b=gtZero, out=JGT);

    And(a=instruction[1], b=zr, out=JEQ);

    And(a=instruction[0], b=instruction[1], out=isJGE);
    And(a=isJGE, b=notNg, out=JGE);

    And(a=instruction[2], b=ng, out=JLT);

    And(a=instruction[2], b=instruction[0], out=isJNE);
    And(a=isJNE, b=notZr, out=JNE);

    Or(a=ng, b=zr, out=leZero);
    And(a=instruction[2], b=instruction[1], out=isJLE);
    And(a=isJLE, b=leZero, out=JLE);

    And(a=isJLE, b=instruction[0], out=JMP);

    Or8Way(in[0]=false, in[1]=JGT, in[2]=JEQ, in[3]=JGE, in[4]=JLT, in[5]=JNE, in[6]=JLE, in[7]=JMP, out=isJump);
    And(a=instruction[15], b=isJump, out=loadPC);

    PC(in=aRegOut, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}