// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static bool color;
    static int screenBase;
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        let screenBase = 16384;

        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = 32767 + 1; // 2's complement range âˆ’32,768 -> 32,767 ((2^15) - 1)

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        // TODO
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int memLocation, memValue, mask;

        if (x < 0 | x > 511 | y < 0 | y > 255) {
            do Sys.error(7); // illegal pixel coordinates error
        }

        let memLocation = screenBase + (y * 32) + (x / 16);
        let memValue = Memory.peek(memLocation);
        let mask = powersOfTwo[x - ((x / 16) * 16)];

        if (color) {
            do Memory.poke(memLocation, memValue | mask);
        } else {
            do Memory.poke(memLocation, memValue & ~mask);
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff;
        var bool isNegDx, isNegDy;

        let dx = x2 - x1;
        let dy = y2 - y1;

        // Use more efficient algorithm to draw straight lines
        if (dy = 0) {
            do Screen._drawStraightLine(x1, y1, dx, true);
            return;
        }
        if (dx = 0) {
            do Screen._drawStraightLine(x1, y1, dy, false);
            return;
        }

        let isNegDx = dx < 0;
        let isNegDy = dy < 0;

        let dx = Math.abs(dx);
        let dy = Math.abs(dy);

        let a = 0;
        let b = 0;
        let diff = 0;

        while ((a < dx) & (b < dy)) {
            if (isNegDx & isNegDy) {
                do Screen.drawPixel(x1 - a, y1 - b);
            } else {
                if (isNegDx) {
                    do Screen.drawPixel(x1 - a, y1 + b);
                } else {
                    if (isNegDy) {
                        do Screen.drawPixel(x1 + a, y1 - b);
                    } else {
                        do Screen.drawPixel(x1 + a, y1 + b);
                    }
                }
            }

            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }

        return;
    }

    function void _drawStraightLine(int x, int y, int length, bool horizontal) {
        var bool isNegativeLength, i;

        let isNegativeLength = length < 0;
        let length = Math.abs(length);
        let i = 0;

        while (i < length) {
            if (horizontal) {
                if (isNegativeLength) {
                    do Screen.drawPixel(x - i, y);
                } else {
                    do Screen.drawPixel(x + i, y);
                }
            } else {
                if (isNegativeLength) {
                    do Screen.drawPixel(x, y - i);
                } else {
                    do Screen.drawPixel(x, y + i);
                }
            }

            let i = i + 1;
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        // TODO
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, xDiff, x1, x2, y12;

        if (r < 0 | r = 0) {
            return;
        }

        // Radius greater than 181 will cause integer overflow when calculating points to draw
        if (r > 181) {
            let r = 181;
        }

        let dy = -r;

        while (dy < (r + 1)) {
            let xDiff = Math.sqrt((r * r) - (dy * dy));
            let x1 = x - xDiff;
            let x2 = x + xDiff;
            let y12 = y + dy;

            do Screen.drawLine(x1, y12, x2, y12);

            let dy = dy + 1;
        }

        return;
    }
}
