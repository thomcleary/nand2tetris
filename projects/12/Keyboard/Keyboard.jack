// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack
/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    /** Initializes the keyboard. */
    function void init() {
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(24576);
    }

    /**	Waits until a key is pressed on the keyboard and released,
     *  then echoes the key to the screen, and returns the character 
     *  of the pressed key. */
    function char readChar() {
        var char pressed;

        let pressed = Keyboard.keyPressed();

        // Wait until key is pressed
        while (pressed = 0) {
            let pressed = Keyboard.keyPressed();
        }

        while (~(Keyboard.keyPressed() = 0)) {
            // Wait until key is released
        }

        do Output.printChar(pressed);

        return pressed;
    }

    /**	Displays the message on the screen, reads from the keyboard the entered
     *  text until a newline character is detected, echoes the text to the screen,
     *  and returns its value. Also handles user backspaces. */
    function String readLine(String message) {
        var String line;
        var char pressed;

        do Output.printString(message);

        let line = String.new(80); // A better approach may be to have a static buffer that can reallocate itself when the String needs to grow 

        let pressed = Keyboard.readChar();
        while (~(pressed = 128)) { // 128 = newline
            if (pressed = 129) { // 129 = backspace
                if (line.length() > 0) {
                    do line.eraseLastChar();
                }
            } else {
                do line.appendChar(pressed);
            }

            let pressed = Keyboard.readChar();
        }

        return line;
    }   

    /** Displays the message on the screen, reads from the keyboard the entered
     *  text until a newline character is detected, echoes the text to the screen,
     *  and returns its integer value (until the first non-digit character in the
     *  entered text is detected). Also handles user backspaces. */
    function int readInt(String message) {
        var String intString;

        let intString = Keyboard.readLine(message);

        return intString.intValue();
    }
}
