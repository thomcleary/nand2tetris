// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array _chars;
    field int _maxLength, _length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        var int arraySize;

        let arraySize = maxLength;
        if ((arraySize = 0) | (arraySize < 0)) {
            // Array length must be strictly positive
            // See Jack OS error codes
            let arraySize = 1;
        }

        let _chars = Array.new(arraySize);
        let _maxLength = maxLength;
        let _length = 0;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do _chars.dispose();
        do Memory.deAlloc(this);

        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return _length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return _chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let _chars[j] = c;

        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (_length = _maxLength) {
            return this;
        }

        let _chars[_length] = c;
        let _length = _length + 1;

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let _length = _length - 1;

        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var bool isNegative;
        var int value, i, d;

        let isNegative = charAt(0) = 45; // 45 = "-"

        if (isNegative) {
            let i = 1;
        } else {
            let i = 0;
        }

        let value = 0;

        while (i < _length) {
            let d = charAt(i);

            if (d < 48 | d > 57) {
                // Break loop when character is non-digit (48 = "0", 57 = "9")
                let i = _length;
            } else {
                let value = (value * 10) + (d - 48);
                let i = i + 1;
            }
        }

        if (isNegative) {
            return -value;
        }

        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let _length = 0;
        
        if (val < 0) {
            do appendChar(45); // "-" = 45
        }

        do _setInt(Math.abs(val));

        return;
    }

    method void _setInt(int val) {
        var int lastDigit;
        var char lastDigitChar;

        let lastDigit = String._mod(val, 10);
        let lastDigitChar = String._digitToChar(lastDigit);

        if (val > 9) {
            do _setInt(val / 10);
        }

        do appendChar(lastDigitChar);

        return;

    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    function int _mod(int x, int y) {
        return x - ((x / y) * y);
    }

    function char _digitToChar(int digit) {
        return digit + 48; // 0 => 48, 1 => 49 ..., 9 => 57
    }
}
