// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static int heapBase;
    static Array memory, freeList;

    /** Initializes the class. */
    function void init() {
        // Jack is a weakly typed language; among other quirks, 
        // it does not prevent the programmer from assigning a constant to a reference variable. 
        // This constant can then be treated as an absolute memory address. 
        // When the reference variable happens to be an array, 
        // this scheme provides indexed access to every word in the host RAM.
        let memory = 0;

        let heapBase = 2048;
        let freeList = heapBase; // the stack is 256 -> 2047;
        let freeList[0] = 0; // next block pointer (pointer < heapBase represents no next block)
        let freeList[1] = 14334; // block size ((16384 // SCREEN memory map base) - (2048 // heapBase) - (1 // next block pointer header) - (1 // block size header))

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int requiredSize;
        var Array freeBlock, newBlock;

        let requiredSize = size + 2; // (1 // block size) + (1 // next block pointer)
        let freeBlock = freeList;

        while (freeBlock[1] < requiredSize) {
            let freeBlock = freeBlock[0];

            if (freeBlock < heapBase) {
                // A block with the required size was not found in the free list
                // NOTE: could attempt defragmentation at this point
                do Sys.error(6); // heap overflow error
            }
        }

        // eg.
        // freeBlock = 2048
        // freeBlock.size = 10
        // freeBlock -> [[nextBlockHeader, sizeHeader]+[2050, 2051, 2052, ..., 2059]]
        // requiredSize = 7
        // newBlock = (2048 + 2) + (10 - 1) - (7)
        //          = 2050 + 9 - 6
        //          = 2053
        //          -> [[headers]+[data]] -> [[2053, 2054]+[2055, 2056, 2057, 2058, 2059]]
        let newBlock = ((freeBlock + 2) + (freeBlock[1]) - 1) - (requiredSize - 1);
        let newBlock[1] = size;

        let freeBlock[1] = freeBlock[1] - requiredSize;

        return newBlock;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array currentBlock;

        let currentBlock = freeList;

        while(~(currentBlock[0] < heapBase)) {
            let currentBlock = currentBlock[0];
        }

        let currentBlock[0] = o;

        return;
    }    
}
