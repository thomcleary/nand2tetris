// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        let n = 16;

        let powersOfTwo = Array.new(n);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = 32767 + 1; // 2's complement range âˆ’32,768 -> 32,767 ((2^15) - 1)

        return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;

        let sum = 0;
        let shiftedX = x;
        let i = 0;

        while (i < n) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }

            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var int absX, absY, absResult;
        var bool isNegativeResult;

        let absX = Math.abs(x);
        let absY = Math.abs(y);
        let absResult = Math._divide(absX, absY);

        let isNegativeResult = ((x < 0) & ~(y < 0)) | (~(x < 0) & (y < 0));

        if (isNegativeResult) {
            return -absResult;
        }
        return absResult;
    }

    function int _divide(int x, int y) {
        var int nextY, q;

        if (y > x) {
            return 0;
        }

        let nextY = 2 * y;
        
        if (nextY < 0) {
        // Handle integer overflow
            let nextY = x;
        }

        let q = Math.divide(x, nextY);

        if ((x - (2 * q * y)) < y) {
            return 2 * q;
        }

        return 2 * q + 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        return -1;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }

        return b;
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }

        return b;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }

        return x;
    }

    /** Returns true if the ith bit of x is 1, otherwise false. */
    function bool bit(int x, int i) {
        return ~((x & powersOfTwo[i]) = 0);
    }
}
